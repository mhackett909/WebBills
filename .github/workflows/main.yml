name: Auto Deploy Spring Boot to Dev

on:
  push:
    branches: [main]

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build Spring Boot App (JAR)
        run: mvn clean verify

      - name: Upload coverage to Codecov
        if: ${{ always() }}
        uses: codecov/codecov-action@v4
        with:
          files: target/site/jacoco/jacoco.xml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set image tag from SHA or fallback
        run: |
          IMAGE_TAG=${GITHUB_SHA::8}
          if [ -z "$IMAGE_TAG" ]; then
            IMAGE_TAG="manual-$(date +%s)"
          fi
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Docker Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build and Push Docker Image
        run: |
          IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${{ secrets.ECR_REPO_BACKEND }}:$IMAGE_TAG
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Render ECS task definition
        run: |
          envsubst < task-def-template.json > task-def-backend.json

      - name: Register New Task Definition and Deploy to ECS
        run: |
          NEW_REVISION=$(aws ecs register-task-definition \
            --cli-input-json file://task-def-backend.json \
            --query 'taskDefinition.revision' --output text)
          aws ecs update-service \
            --cluster bills-dev-fargate-cluster \
            --service webbills-dev-fargate \
            --task-definition webbills-task-fargate:$NEW_REVISION \
            --force-new-deployment
